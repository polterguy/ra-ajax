<h3>Aim of this tutorial</h3>
<ul>
	<li>Help you understand the styling ofRa-Ajax Controls</li>
	<li>Teach you some basic animations</li>
</ul>

<h3>Prerequisites</h3>
<ul>
	<li>That you have <a href="http://code.google.com/p/ra-ajax/">Downloaded Ra-Ajax</a></li>
	<li>That you're using Visual Studio 2005 or later and have it running</li>
	<li>That you've read and understood the "Hello World" tutorial</li>
	<li>That you understand basic CSS and HTML</li>
</ul>

<h3>Getting started</h3>
<p>
	Ra-Ajax have a very powerful styling mechanism which helps you to give your
	controls the exact look you want to. The most important property in such regards
	is the <i>CssClass</i> which exists for almost every control in Ra-Ajax. This property
	maps to the <i>class attribute</i> which should be familiar to most CSS and HTML
	coders. Though there is also a very powerful wrapper around the <i>style</i>
	HTML atribute - the <i>Style property</i> in addition to an extremely powerful
	Effect library. The Effect library is also highly extensible so that you can create
	your own Effects.
</p>
<p>
	First start of by creating a default ASP.NET Website which you should know how to
	do after reading our <i>Hello World</i> tutorial. Make sure you reference the 
	<i>Ra.dll</i> in this website.
</p>
<p>
	Then add up a Ra Panel into your <i>Default.aspx</i> page and add up some 
	mumbo-jumbo text within your Panel.
</p>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;"
    ID="pnl">
    Howdy world. I'm *READY* to ROCK...!!
</ra:Panel>
</pre>
<p>
	As you can see we have added some style properties to our Panel. This
	will just map out to plain old style values within our HTML. Now we
	will in addition add up some style values in our <i>Page_Load</i> 
	Event Handler.
</p>
<pre lang="cs">
protected void Page_Load(object sender, EventArgs e)
{
    pnl.Style[Styles.backgroundColor] = "Yellow";
    pnl.Style[Styles.border] = "dashed 2px #999";
}
</pre>
<p>
	So as you can see we can add up styles both declaratively in addition to
	also in code. The Styles part within the brackets are just a very large
	enum which holds most of the commonly used style values for your convenience.
	The Style indexer property also have a version taking a string in case you
	wish to use style properties which does not exist in our enum.
</p>
<p>
	If you run this you should see a yellow panel with a border and a specific
	size.
</p>
<p>
	Now you can add up a Ra Button within your Panel.
</p>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;"
    ID="pnl">
    Howdy world. I'm *READY* to ROCK...!!
    <ra:Button 
        runat="server" 
        ID="btn" 
        OnClick="foo" 
        Text="Click me..." />
</ra:Panel>
</pre>
<p>
	Then we're going to add up some <i>Effects</i> within our Button Click Event Handler.
</p>

<pre lang="cs">
protected void foo(object sender, EventArgs e)
{
    new EffectRollUp(pnl, 400).Render();
}
</pre>
<p>
	Notice how we are just instantiating our Effect and immediately calling the Render
	method on it. We could store the Effect into a variable and then call Render on the
	reference to it like this;
</p>
<pre lang="cs">
protected void foo(object sender, EventArgs e)
{
    Effect f = new EffectRollUp(pnl, 400);
    f.Render();
}
</pre>
<p>
	But the short version is more then enough since we don't need to de-reference the
	Effect at all later anyway. So we'll go with the short version...
</p>
<h3>Even System in Ra-Ajax</h3>
<p>
	Ra-Ajax have <b>many</b> more events for all widgets then you are used to in ASP.NET.
	Among some of these events are;
</p>
<ul>
	<li>MouseOver</li>
	<li>MouseOut</li>
	<li>Click</li>
	<li>DblClick</li>
	<li>etc...</li>
</ul>
<p>
	We're going to handle the <i>MouseOut</i> and the <i>MouseOver</i> events here
	for some additional candy. Change the markup for your Panel to this;
</p>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;"
    OnMouseOver="mouseOver"
    OnMouseOut="mouseOut"
    ID="pnl">
    Howdy world. I'm *READY* to ROCK...!!
    <ra:Button 
        runat="server" 
        ID="btn" 
        OnClick="foo" 
        Text="Click me..." />
</ra:Panel>
</pre>
<p>
	Then add up these two event method in your codebehind.
</p>
<pre lang="cs">
protected void mouseOver(object sender, EventArgs e)
{
    new EffectSize(pnl, 500, 600, 600).Render();
}

protected void mouseOut(object sender, EventArgs e)
{
    new EffectSize(pnl, 500, 300, 300).Render();
}
</pre>
<p>
	If you now run the sample and hover your mouse over and out of the yellow Panel
	you should have some funny Effects running.
</p>

<h3>Chaining and Joining Effects...</h3>
<p>
	In addition to just running Effects like we are doing here, Ra-Ajax also have support
	for joining Effects and chaining Effects.
</p>

