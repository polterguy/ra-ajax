<h3>Aim of this tutorial</h3>
<ul>
	<li>Help you understand the styling logic of Ra-Ajax Controls</li>
	<li>Teach you how to use Effects on your controls</li>
</ul>

<h3>Prerequisites</h3>
<ul>
	<li>That you have <a href="http://code.google.com/p/ra-ajax/">Downloaded Ra-Ajax</a></li>
	<li>That you're using Visual Studio 2005 or later and have it running</li>
	<li>That you've read and understood the "Hello World" tutorial</li>
	<li>That you understand basic CSS and HTML</li>
</ul>

<h3>Getting started</h3>
<p>
	Ra-Ajax has a very powerful styling mechanism which enables you to give your
	controls the exact look you want to. The most important property in such regards
	is the <i>CssClass</i> which exists for almost every control in Ra-Ajax. This property
	maps to the <i>class attribute</i> which should be familiar to most CSS and HTML
	coders. Though there is also a very powerful wrapper around the <i>style</i>
	HTML attribute - the <i>Style property</i>. In addition to both of these constructs, Ra-Ajax
	also contains an extremely powerful Effect library. The Effect library is also highly 
	extensible so that you can create your own Effects.
</p>
<p>
	First start off by creating a default ASP.NET Website which you should know how to
	do after reading our <i>Hello World</i> tutorial. Make sure you reference the 
	<i>Ra.dll</i> in this website.
</p>
<p>
	Then add a Ra Panel into your <i>Default.aspx</i> page and enter some 
	mumbo-jumbo text within your Panel.
</p>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;"
    ID="pnl">
    Howdy world. I'm *READY* to ROCK...!!
</ra:Panel>
</pre>
<p>
	As you can see we have added some style properties to our Panel. This
	will be mapped to the plain old Style values within our HTML. Now we
	will also add some style values in our <i>Page_Load</i> 
	Event Handler.
</p>
<pre lang="cs">
protected void Page_Load(object sender, EventArgs e)
{
    pnl.Style[Styles.backgroundColor] = "Yellow";
    pnl.Style[Styles.border] = "dashed 2px #999";
}
</pre>
<p>
	So, as you can see we can add up styles both declaratively in and also
	in code. In fact, semantically there are no differences from the above
	two different scenarios, although obviously the markup version might, in general
	terms be considered "better" since it separates code/logic and appearance/HTML('ish).
	The Styles part within the brackets are just a very large
	enum which holds most of the commonly used style values for your convenience.
	The Style indexer property also has a version taking a string in case you
	wish to use style properties which does not exist in our enum.
</p>
<p>
	If you run this you should see a yellow panel with a border and a specific
	size.
</p>
<p>
	Note that all Style values can be changed in any Event Handler and they
	will be sent back to the client and update your widget. Notice also, that these
	changes will be stored in the ViewState so that you at any time can read out 
	the current value of any style attribute of all your controls.
</p>

<h3>Ra-Ajax Effects for bling</h3>
<p>
	Now you can add a Ra Button within your Panel.
</p>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;"
    ID="pnl">
    Howdy world. I'm *READY* to ROCK...!!
    <ra:Button 
        runat="server" 
        ID="btn" 
        OnClick="foo" 
        style="border:none 0;margin:0;padding:0;"
        Text="Click me..." />
</ra:Panel>
</pre>
<p>
	Then we're going to add some <i>Effects</i> within our Button Click Event Handler.
</p>

<pre lang="cs">
protected void foo(object sender, EventArgs e)
{
    new EffectRollUp(pnl, 400).Render();
}
</pre>
<p>
	Notice how we are just instantiating our Effect and immediately calling the Render
	method on it. We could store the Effect into a variable and then call Render on the
	reference to it like this;
</p>
<pre lang="cs">
protected void foo(object sender, EventArgs e)
{
    Effect f = new EffectRollUp(pnl, 400);
    f.Render();
}
</pre>
<p>
	But the short version is more than enough, since we don't need to de-reference the
	Effect at all. So we'll go with the short version...
</p>
<h3>About the Event System of Ra-Ajax</h3>
<p>
	Ra-Ajax widgets have <b>many</b> more events - much more than 
	you are used to with the ASP.NET controls. Among some of these events are:
</p>
<ul>
	<li>MouseOver</li>
	<li>MouseOut</li>
	<li>Click</li>
	<li>DblClick</li>
	<li>etc...</li>
</ul>
<p>
	We're going to handle the <i>MouseOut</i> and the <i>MouseOver</i> events here, to show 
	how to take advantage of manipulating this widget. Change the markup for your Panel to this;
</p>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;"
    OnMouseOver="mouseOver"
    OnMouseOut="mouseOut"
    ID="pnl">
    Howdy world. I'm *READY* to ROCK...!!
    <ra:Button 
        runat="server" 
        ID="btn" 
        OnClick="foo" 
        style="border:none 0;margin:0;padding:0;"
        Text="Click me..." />
</ra:Panel>
</pre>
<p>
	Then add these two event handlers in your codebehind.
</p>
<pre lang="cs">
protected void mouseOver(object sender, EventArgs e)
{
    new EffectSize(pnl, 500, 600, 600).Render();
}

protected void mouseOut(object sender, EventArgs e)
{
    new EffectSize(pnl, 500, 300, 300).Render();
}
</pre>
<p>
	If you now run the sample and hover your mouse over and out of the yellow Panel
	you should have some funny Effects running.
</p>

<h3>Chaining and Joining Effects...</h3>
<p>
	In addition to just running Effects like we are doing here, Ra-Ajax also has support
	for <i>joining</i> Effects and <i>chaining</i> Effects. When you <i>join</i> two or more 
	effects, then those effects will run simultaneously. When you <i>chain</i> effects, then
	those effects will run in a chain so that when the first one is finished the next
	one in the "queue" will run, and so on - sequentially in the order they were added to
	the Chained collection. Change your foo method as shown below to see two joined
	effects.
</p>
<pre lang="cs">
protected void foo(object sender, EventArgs e)
{
    new EffectRollUp(pnl, 400)
        .JoinThese(new EffectFadeOut())
        .Render();
}
</pre>
<p>
	Now you will get the effect of the Panel being "rolled up" at the same time the 
	Panel will fade away. Notice that for <i>Joined</i> effects you don't need to give 
	neither a Control nor a duration, since both of these are implicitly expected to be 
	the same as the "mother" effect when joining. In fact if you give it a Control and 
	a duration then those values will be ignored!
</p>
<p>
	While for Chained effects you will get a runtime exception unless you explicitly
	give them both a Control and a duration value, just as a "loose" effect also will do.
</p>
<p>
	Notice that both the <i>JoinThese</i> and the <i>ChainThese</i> methods can take
	any number of Effects. If you embed multiple effects into the JoinThese method
	then all will run at the same time. If you embed multiple Effects into the
	ChainThese method then those effects will be "queued up" in such a way that the
	first effect will run, then the second, then the third and so on. To really see 
	this in action change your foo method to the code below.
</p>

<pre lang="cs">
protected void foo(object sender, EventArgs e)
{
    new EffectRollUp(btn, 400)
        .JoinThese(
            new EffectFadeOut())
        .ChainThese(
            new EffectRollDown(btn, 400)
                .JoinThese(new EffectFadeIn()),
            new EffectSize(btn, 500, 150, 150),
            new EffectTimeout(500),
            new EffectSize(btn, 500, 200, 200),
            new EffectTimeout(500),
            new EffectSize(btn, 500, 250, 250))
        .Render();
}
</pre>
<p>
	Now run the sample and click the Button.
</p>
<p>
	As you can see the FadeOut effect runs at the same time as the RollUp effect.
	Then the Button will RollDown while at the same time FadeIn. Then the button
	will grow to 150x150 pixels before a small pause of 0.5 seconds occurs.
	Then the Button will grow yet again, this time to 200x200 pixels, another
	small pause before the Button finally grows to its end size of 250x250 pixels.
</p>
<p>
	So you can create any amount of complexity when you join and chain effects.
</p>
<p>
	Oh yeah, the <i>duration</i> value passed into the constructor of your effects
	are obviously <b>milliseconds</b> for the effect to execute. 1 second = 1000 
	milliseconds, in case you're one of our "held back friends" from the wrong side
	of the Atlantic Ocean in regards to the usage of the Metric System. ;)
</p>
<p>
	You also have some other properties to play with if you store a reference to 
	the Effect into a variable.
</p>

<h3>State, ViewState and your Styles Collection</h3>
<p>
	When you run an effect or change the Style collection of your Controls,
	then the state of whatever value you change will be preserved in the ViewState.
	This means that if you click the button and then set a break point in your 
	Page_Load event handler you will see that the width and height of the Button is
	250 pixels. So that even though the effects are running on the client (browser)
	the Effect library will actually update any style values it changes before
	it returns back to the client as they will be in their "end position" and
	store this in the ViewState.
</p>
<p>
	All Effects in Ra-Ajax can easily be found by filtering the Classes Reference 
	Documentation for "Effect".	Most of them also have samples running for you, 
	so you can watch them in action.
</p>
<p>
	The entire code for this sample is pasted below for your convenience.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<%@ Page 
    Language="C#" 
    AutoEventWireup="true"  
    CodeFile="Default.aspx.cs" 
    Inherits="_Default" %>

<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
    <head runat="server">
        <title>Untitled Page</title>
    </head>
    <body>
        <form id="form1" runat="server">
            <div>
                <ra:Panel 
                    runat="server" 
                    style="width:200px;height:200px;"
                    OnMouseOver="mouseOver"
                    OnMouseOut="mouseOut"
                    ID="pnl">
                    Howdy world. I'm *READY* to ROCK...!!
                    <ra:Button 
                        runat="server" 
                        ID="btn" 
                        OnClick="foo" 
                        style="border:none 0;margin:0;padding:0;"
                        Text="Click me..." />
                </ra:Panel>
            </div>
        </form>
    </body>
</html>
</pre>
<b>Default.aspx.cs</b>
<pre lang="cs">
using System;
using Ra.Widgets;

public partial class _Default : System.Web.UI.Page 
{
    protected void Page_Load(object sender, EventArgs e)
    {
        pnl.Style[Styles.backgroundColor] = "Yellow";
        pnl.Style[Styles.border] = "dashed 2px #999";
    }

    protected void foo(object sender, EventArgs e)
    {
        new EffectRollUp(btn, 400)
            .JoinThese(
                new EffectFadeOut())
            .ChainThese(
                new EffectRollDown(btn, 400)
                    .JoinThese(new EffectFadeIn()),
                new EffectSize(btn, 500, 150, 150),
                new EffectTimeout(500),
                new EffectSize(btn, 500, 200, 200),
                new EffectTimeout(500),
                new EffectSize(btn, 500, 250, 250))
            .Render();
    }

    protected void mouseOver(object sender, EventArgs e)
    {
        new EffectSize(pnl, 500, 600, 600).Render();
    }

    protected void mouseOut(object sender, EventArgs e)
    {
        new EffectSize(pnl, 500, 300, 300).Render();
    }
}
</pre>


