<h3>Aim of this tutorial</h3>
<ul>
	<li>Get you started with Ra-Ajax development</li>
	<li>Teach you the basics of Ra-Ajax</li>
	<li>Teach you the basic semantics and internals of Ra-Ajax</li>
	<li>Teach you about Partial Rendering and why Ra-Ajax does <b>*NOT*</b> use it</li>
	<li>Give you a nice starting point for further research</li>
</ul>

<h3>Prerequisites</h3>
<ul>
	<li>That you have <a href="http://code.google.com/p/ra-ajax/">Downloaded Ra-Ajax</a></li>
	<li>That you're using Visual Studio 2005 or later and have it running</li>
	<li>That you're familiar with basic C# and ASP.NET concepts</li>
	<li>To follow the last parts of this tutorial you will also need to have FireFox installed in addition to <a href="http://getfirebug.com">FireBug</a>, but this is strictly not necessary</li>
</ul>

<h3>Getting started</h3>
<p>
	The first thing you must do is to start a new <i>ASP.NET Web Site</i> in Visual Studio. This can be
	done by going to the <b>File | New | Web Site...</b> menu in Visual Studio. Enter the name
	"Hello World" for this website, make sure you have chosen C# as the primary language and 
	"File System" as the location for it and then click OK.
</p>
<p>
	Then you need to add a reference to <i>Ra.dll</i> in your project. This DLL should be within
	the <i>binaries</i> folder where you unzipped Ra-Ajax. Make sure you use the uncompressed
	version of Ra. Do this by right-clicking the "Hello World" website node in your solution 
	explorer and choose <i>Add Reference...</i> Browse to the <i>uncompressed</i> folder within
	the <i>binaries</i> folder of the place you unzipped Ra-Ajax after downloading it and click OK
	after selecting Ra.dll.
</p>
<p>
	Now you should have a Default.aspx file which you can run. Of course it doesn't do anything
	interesting at all yet, but press F5 to verify that you've done everything correctly so far.
</p>

<h3>Adding your first Ra-Ajax Control</h3>
<p>
	Before we can start adding Ra-Ajax Controls we must make sure that Ra-Ajax is being included
	on our page for Control parsing. Make sure you add the code below just below your Page directive
	in your Default.aspx file.
</p>
<pre lang="xml">
<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>
</pre>
<p>
	Without this directive we cannot include Ra-Ajax controls on our page.
</p>
<p>
	Then copy and paste the code below anywhere within your &lt;form... element.
</p>
<pre lang="xml">
<ra:Button 
    runat="server" 
    ID="btn" 
    Text="Click me..." 
    OnClick="btn_Click" />
</pre>
<p>
	Then in your codebehind file (<i>Default.aspx.cs</i>) you must add the code below. 
	Make sure you add it within your class as a method.
</p>
<pre lang="cs">
protected void btn_Click(object sender, EventArgs e)
{
    btn.Text = "Hello World!";
}
</pre>
<p>
	And that's it. Press F5 to run and test your first Ra-Ajax Application :)
</p>

<h3>Entire code</h3>
<p>
	Note your code might look slightly different depending upon the version of Visual Studio
	and .Net Framework you're using, but don't panic. It probably is semantically the 
	same anyway ... ;)
</p>
<b>Default.aspx</b>
<pre lang="xml">
<%@ Page 
    Language="C#" 
    AutoEventWireup="true"  
    CodeFile="Default.aspx.cs" 
    Inherits="_Default" %>

<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
    <head runat="server">
        <title>Untitled Page</title>
    </head>
    <body>
        <form id="form1" runat="server">
            <div>
                <ra:Button 
                    runat="server" 
                    ID="btn" 
                    Text="Click me..." 
                    OnClick="btn_Click" />
            </div>
        </form>
    </body>
</html>
</pre>

<b>C# code</b>
<pre lang="cs">
using System;

public partial class _Default : System.Web.UI.Page 
{
    protected void btn_Click(object sender, EventArgs e)
    {
        btn.Text = "Hello World!";
    }
}
</pre>

<h3>Explanation - Ra Internals... [Advanced]</h3>
<p>
	Now we have added a 
	<a href="Docs.aspx?class=Ra.Widgets.Button">Ra-Ajax Button</a> 
	to our page. Then we attached an Event Handler (btn_Click)
	for the <i>Click</i> event - (<i>OnClick</i> in .ASPX markup). Whenever the Button is clicked, 
	our event handler will be called on the server.
</p>
<p>
	The <i>btn_Click</i> method above will just change the Text property of our button and nothing 
	more. But there are some interesting points here which we can take a look at if we use FireBug. 
	If we open FireBug and take a look at the POST request which was being raised we will see 
	something similar to this. 
	<img src="tutorials/hello-world-tutorial.jpg" alt="Screenshot of FireBug" />
</p>
<p>
	There are two important facts about Ra-Ajax in that screenshot. First of all you can see that
	there is absolutely no HTML being rendered back to the client. In fact the line;
</p>
<pre lang="cs">
Ra.Control.$('btn').handleJSON({"Value":"Hello World!"});
</pre>
<p>
	is the only evidence of anything except for the ViewState being updated at all.
</p>

<h3>Ra-Ajax and Partial Rendering</h3>
<p>
	Ra-Ajax rarely uses Partial Rendering, at least not when it doesn't have to.
	Partial Rendering is the concept of rendering back HTML to "some parts" of the page. From there 
	the phrase <i>Partial Rendering</i>, as in <i>"<b>render</b> some <b>parts</b> of the website's HTML"</i>.
	This is the way UpdatePanels in ASP.NET AJAX works for instance, and also the way Anthem.NET 
	works. But it is unfortunately neither the optimal methodology nor the best architecture 
	to base your Ajax Framework on top of. This becomes obvious by the amount of JavaScript
	development you have to do when using those Ajax Frameworks. With Ra-Ajax you can almost forget
	about JavaScript programming almost as if it was as remote as CISCx86 OPCODES for your CPU. In
	binary format!
</p>
<p>
	Instead of using Partial Rendering Ra-Ajax can change specific properties and attributes of 
	widgets on the client side without having to render back HTML. So when you update the
	HTML <i>class</i> attribute's value on the server through the CssClass property, then 
	<b>*ONLY*</b> the <i>class</i> attribute's value is changed!
</p>
<p>
	This means that all the other attributes and event handlers of the HTML element - basically
	the entire <i>state</i> - remains unchanged on the client. This has the benefit of 
	significantly reducing the amount of bandwidth usage. Think in terms of updating the class 
	attributes for your Panel which contains 13 pages of written text within and you can 
	quite easily get the picture!
</p>
<p>
	The <i>"Partial Rendering"</i> versions of those callbacks would have to render the entire
	contents of that Panel back to the client - 13 pages of written text. While the Non-Partial
	Rendering based framework would get away with only a small call to a method on an object.
	Probably less than 50 bytes in total!
</p>
<p>
	Not to mention that Event Handlers and such don't need to be updated, and <b>*NO*</b> state
	from your HTML and DOM is changed or removed except <b>*ONLY*</b> the attributes that
	you <b>*CHOOSE*</b> to change yourself in a <b>*STATICALLY*</b> typed programming language (C#, 
	VB.NET, Boo and more than 50 other languages to choose from) on the server, behind your 
	firewall and in a secure environment. Which brings me to the third point...
</p>
<p>
	<b>*Absolutely NO Busines Logic in JavaScript*</b>. This translates into orders of
	magnitude more <b>*SAFE*</b> code, thousands of times <b>*EASIER TO MAINTAIN CODE*</b>, 
	a small quantity of <b>*LESS*</b> code, and <b>*WAY LESS COMPLEX*</b> code. <b>*ZERO 
	DUPLICATES*</b> of code since nothing needs to be implemented in JavaScript. Which all 
	together translates into 
	<b>*LESS*</b> developer costs for management, 
	<b>*BETTER*</b> control of deadlines. 
	<b>*LESS*</b> overtime and 
	<b>*MORE HAPPY*</b> employees!
</p>

<div style="border:dashed 1px #999;padding:15px;background-color:White;">
<h3>Infomercial. 3..., 2..., 1..., GO! - Attempt at being funny ... ;)</h3>
<p>
	<b>Batman's elder brother, Tim</b>; <i>"So if you have trouble at home, with your soccer training instructor or your girlfriend/boyfriend,
	what are you waiting for...?"</i>
</p>
<p>
	<b>Superhero coder Berney</b>; <i>"Take a pill for a headache, take two, take a chill pill, take your own personal, 
	free as in free beer and free as in freedom version of Ra-Ajax TODAY! ;)"</i>
</p>
<p>
	<i>Mr. Joe Average gasps for air while trying to support his upper body on his knees with his hands</i>
</p>
<p>
	<b>Berney el Magnifico, still understands punch cards, COBOL and occasionally even his own code according to
	an unconfirmed rumor</b>; <i>"Today you even get two for the price of one - $0.00 dollars ... ;)"</i>
</p>
<p>
	<i>Joe Average falls dead to the ground while stuttering out his final words</i>
</p>
<p>
	<i>"Ra-Ajax, give me some. I wished I would have believed in you, can you forgive me...?"</i>
</p>
<p>
	<i>Curtain Drops</i>
</p>
<p>
	The audience bursts out into involuntary explosions of evangelistic and ecstatic laughter while
	shouting: <i>"Praise Ra-Ajax! Long live Ra-Ajax!" It's what the Egyptians would have used when building the Pyramids, 
	if they only could.</i>
</p>
</div>

<h3>Back to tech again...</h3>
<p>
	Anyway...
	<br/>
	To get technical again... ;)
</p>
<p>
	This makes Ra-Ajax <i>stateful</i> which in turn makes it possible to create really rich
	functionality within Ra-Ajax applications. If we were to render the entire Button when
	we changed properties and attributes of it, then we would loose state. This is a BAD thing
	since even for the really simple example above the Button would loose Focus. This would
	happen since the entire HTML for the Button would re-render through Partial Rendering
	and whatever state the browser was in, in regards to the Button would be completely lost.
</p>
<p>
	Now, by just changing the properties on the Button which actually did change on
	the Ajax Request, we are able to completely keep state and not loose any "value" for our
	end users. The updates are returned from the server using JSON and the <i>Value</i> property
	is actually being mapped to a function in Ra-Ajax which will only change the Text property
	of the button.
</p>
<p>
	For a simple example like this you might say that it's not a big deal to get rid of Partial
	Rendering. And you're right. For such a simple example it doesn't really matter. However
	if you start playing around with more complex and rich functionality like 
	<a href="Docs.aspx?class=Ra.Extensions.Widgets.Window">Windows</a>, 
	<a href="Docs.aspx?class=Ra.Extensions.Widgets.DateTimePicker">DateTimePickers</a>, 
	<a href="Docs.aspx?class=Ra.Extensions.Widgets.AutoCompleter">AutoCompleters</a> 
	and such then getting rid of Partial Rendering is not only a need, but a MUST.
</p>
<p>
	Without getting rid of Partial Rendering then all your logic which is slightly more advanced
	than this example, would end up forcing you into writing lots and lots of JavaScript. This is
	why ASP.NET AJAX forces its users to write so much JavaScript and why they need to have 
	WebServices for their AutoCompleters and many of their more "advanced" controls. While Ra-Ajax
	can use a purely <i>Event Driven</i> model.
</p>
<p>
	This makes your code much easier to maintain. Much easier to understand. Much easier to track
	bugs. And much easier to change and add features to. In addition to that, ALL your code 
	will be C# and you almost never have to resort to writing JavaScript. Even for your most 
	complex and richest scenarios.
</p>
<p>
	This is why we call Ra-Ajax a <b>No JavaScript Ajax Framework</b>. Kind of like GWT, 
	though with a completely different foundation. Many people have faulty interpreted this
	fact as if Ra-Ajax developers hate JavaScript. This is simply not true. We love JavaScript
	but we just don't think it has anything to do in the application layer of your code.
	We think of JavaScript as the driver to your graphic card, or the <i>new Assembly Language</i>. 
	Sometimes you need to know about its internals, but for most office applications and such you 
	don't even need to know about its existence. Just like JavaScript in regards to Web-Application 
	development :)
</p>
<p>
	This is why we call Ra-Ajax a <a href="http://ra-ajax.org/managed-ajax-a-new-approach-to-ajax.blog">
	Managed Ajax</a> Framework...
</p>
<p>
	On to <a href="Docs.aspx?tutorial=002-Styling_and_Effects">Styling and Effects in Ra-Ajax</a>...
</p>

