<h3>Aim of this tutorial</h3>
<ul>
	<li>Understand how Behaviors works</li>
	<li>Teach you how to modify behavior on your controls through the Ra-Ajax Behaviors</li>
	<li>Teach you how to use the Extension Controls in the Extension Project of Ra-Ajax</li>
</ul>

<h3>Prerequisites</h3>
<ul>
	<li>That you have read (and understood) both the "Hello World" tutorial and the "Styling and Effects" tutorial</li>
</ul>

<h3>Getting started</h3>
<p>
	Create a default <i>ASP.NET Website</i> as described in the Hello World tutorial and make sure
	you also reference <i>Ra.dll</i> in this website. Though in addition to the Ra.dll you also
	need to include the <i>Extensions.dll</i> this time. Then we need to add up the reference to
	also our Extensions.dll in our markup at the top of the page. Make sure you add the code below
	in your <i>Default.aspx</i> page just below the Page directive.
</p>
<pre lang="xml">
<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<%@ Register 
    Assembly="Extensions" 
    Namespace="Ra.Extensions" 
    TagPrefix="ext" %>
</pre>
<p>
	Now we can in addition to the many controls which exists in our Ra.dll also use the many
	controls which resides in our Extensions.dll. The Extension project contains all the
	more "advanced" Ajax Controls like.
</p>
<ul>
	<li>Ajax Windows</li>
	<li>Our Calendar and DateTimePicker controls</li>
	<li>The Timer Control</li>
	<li>and many, many more...</li>
</ul>
<p>
	If you need an "advanced" control then it is highly likely that this is the place you'll find
	it. While the Ra.dll only contains the "core" controls like Button, CheckBoxes, plus the
	base effects and behaviors.
</p>

<h3>What's the position of my panel?</h3>
<p>
	We're going to make a Panel which we make draggable through the <i>BehaviorDraggable</i>
	behavior. Copy and paste this code into your website.
</p>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;background-color:Yellow;position:absolute;"
    ID="pnl">
    Catch me if you can...
    <ra:BehaviorDraggable 
        runat="server" 
        ID="dragger" />
</ra:Panel>
</pre>
<p>
	Then try to run the code and observer how you can drag and drop the Panel around on the
	screen to change its position. On to Mysteries Things...
</p>
<p>
	For those with FireBug installed you may have already observed something mysteries. Every
	time you let go of the Panel a new Ajax Request is being created. This is to go to the 
	server, update the Style collection of the Panel with the new x and y coordinate and
	also raise the <em>Dropped Event Handler</em> - if it has been attached.
</p>
<p>
	If you think about the above sentence then you will realize that this means that the
	Style collection will even be updated when you move your Panel around on the screen.
	Reflecting the new position of your Widget. If we add up a <em>Dropped</em> Event Handler
	for our BehaviorDraggable and add up some effect into our Event Handler you will see
	this in action.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;background-color:Yellow;position:absolute;"
    ID="pnl">
    Catch me if you can...
    <ra:BehaviorDraggable 
        runat="server" 
        OnDropped="dropped"
        ID="dragger" />
</ra:Panel>
</pre>
<b>Default.aspx.cs</b>
<pre lang="cs">
protected void dropped(object sender, EventArgs e)
{
    Random rnd = new Random();
    new EffectMove(pnl, 300, rnd.Next(0, 900), rnd.Next(0, 600)).Render();
}
</pre>
<p>
	As you can see we now move the Panel randomly around whenever you drop it after dragging
	it. And thanx to the stateful model of Ra-Ajax everything will be kept and stored in
	the ViewState so that the server and the client is always in "sync" in regards to what
	they know about your widgets. This can be seen by adding up two labels in your Panel
	and set their values in the Page_Load method first, and then afterwards after you've
	executed your effect.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<ra:Panel 
    runat="server" 
    style="width:200px;height:200px;background-color:Yellow;position:absolute;"
    ID="pnl">
    Catch me if you can...
    <br />
    <ra:Label 
        runat="server" 
        ID="first" 
        Text="Pos before Effect" />
    <br />
    <ra:Label 
        runat="server" 
        ID="second" 
        Text="Pos after Effect" />
    <ra:BehaviorDraggable 
        runat="server" 
        OnDropped="dropped"
        ID="dragger" />
</ra:Panel>
</pre>
<b>Default.aspx.cs</b>
<pre lang="cs">
protected void Page_Load(object sender, EventArgs e)
{
    if (IsPostBack)
    {
        first.Text = 
            string.Format(
                "x:{0}, y:{1}", 
                pnl.Style["left"], 
                pnl.Style["top"]);
    }
}

protected void dropped(object sender, EventArgs e)
{
    Random rnd = new Random();
    new EffectMove(pnl, 300, rnd.Next(0, 900), rnd.Next(0, 600)).Render();
    second.Text =
        string.Format(
            "x:{0}, y:{1}",
            pnl.Style["left"],
            pnl.Style["top"]);
}
</pre>
<p>
	If you execute the above code you will see that when you drag the Panel
	then your Load Event Handler will set the Text of the first Label
	to the left/top values that you dragged your Panel to. Then the
	Effect will run before the code set its second Label to the left/top
	properties of the Panel after the effect has ran. These two property
	pairs will be <b>*DIFFERENT*</b>. This is because when the Effect is
	finished running then the top/left property of your widget has 
	<b>*CHANGED*</b> to whatever values the Effect will make your widget 
	end up with. This is a highly useful feature of Ra-Ajax and is
	your guarantee of that the server and the client never comes out of 
	"sync" in regards to eachother.
</p>
<p>
	To make this even easier to understand you can merge the two setting 
	logics of your Panel into the same method having one before the Effect
	runs and the other after the effect is finished running like this.
</p>
<pre lang="cs">
protected void dropped(object sender, EventArgs e)
{
    first.Text =
        string.Format(
            "x:{0}, y:{1}",
            pnl.Style["left"],
            pnl.Style["top"]);
    Random rnd = new Random();
    new EffectMove(pnl, 300, rnd.Next(0, 900), rnd.Next(0, 600)).Render();
    second.Text =
        string.Format(
            "x:{0}, y:{1}",
            pnl.Style["left"],
            pnl.Style["top"]);
}
</pre>
<p>
	But thn we won't get to show of that the style collection is automatically
	updated before the Load Event of your Page fires ... ;)
</p>

<h3>Wrapping up the code</h3>
<p>
	Below is the entire code for this tutorial for reference purposes.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<%@ Page 
    Language="C#" 
    AutoEventWireup="true"  
    CodeFile="Default.aspx.cs" 
    Inherits="_Default" %>

<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<%@ Register 
    Assembly="Extensions" 
    Namespace="Ra.Extensions" 
    TagPrefix="ext" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
    <head runat="server">
        <title>Untitled Page</title>
    </head>
    <body>
        <form id="form1" runat="server">
            <div>
                <ra:Panel 
                    runat="server" 
                    style="width:200px;height:200px;background-color:Yellow;position:absolute;"
                    ID="pnl">
                    Catch me if you can...
                    <br />
                    <ra:Label 
                        runat="server" 
                        ID="first" 
                        Text="Pos before Effect" />
                    <br />
                    <ra:Label 
                        runat="server" 
                        ID="second" 
                        Text="Pos after Effect" />
                    <ra:BehaviorDraggable 
                        runat="server" 
                        OnDropped="dropped"
                        ID="dragger" />
                </ra:Panel>
            </div>
        </form>
    </body>
</html>
</pre>
<b>Default.aspx.cs</b>
<pre lang="cs">
using System;
using Ra.Widgets;

public partial class _Default : System.Web.UI.Page 
{
    protected void dropped(object sender, EventArgs e)
    {
        first.Text =
            string.Format(
                "x:{0}, y:{1}",
                pnl.Style["left"],
                pnl.Style["top"]);
        Random rnd = new Random();
        new EffectMove(pnl, 300, rnd.Next(0, 900), rnd.Next(0, 600)).Render();
        second.Text =
            string.Format(
                "x:{0}, y:{1}",
                pnl.Style["left"],
                pnl.Style["top"]);
    }
}
</pre>
<p>
	Yet again I must remind you of that depending upon which version of Visual Studio
	and/or which version of .Net Framework you are using your code might look slightly
	different then the code above...
</p>
