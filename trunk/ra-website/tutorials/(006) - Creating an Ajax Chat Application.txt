<h3>Aim of this tutorial</h3>
<ul>
	<li>Help you leverage your existing knowledge in a complete application</li>
	<li>Teach you how to combine controls together to create rich functionality</li>
</ul>

<h3>Prerequisites</h3>
<ul>
	<li>That you have read and understood the previous tutorials in this series</li>
</ul>

<h3>Getting started</h3>
<p>
	So far we have only skimmed the surface of Ra-Ajax and haven't really created
	anything of real use or value. Today we are going to fix that by combining our existing
	knowledge together to create an Ajax Chat Application using features from Ra-Ajax like;
</p>
<ul>
	<li>Window</li>
	<li>Behaviors</li>
	<li>Effects</li>
	<li>Timer</li>
	<li>And more...</li>
</ul>

<p>
	There exists a billion different chat components or chat applications out there. It 
	seems as though every Ajax Framework or CMS with respect for itself needs to demonstrate 
	that it's possible to create a Chat Application utilizing "xxx Ajax Framework".
</p>
<p>
	When we want to create a Chat Application there is an immediate problem we face when
	doing this in the web-world. This problem is whether or not we should use polling or
	push technology. <em>Polling</em> is the concept where you have something which every 
	n'th second goes to the server to "poll" to check if there are any new "messages"
	in the message queue. While <em>push</em> is a technology often refered to as 
	<em>Comet</em>, <em>LazyHTTP</em>, <em>StreamingHTTP</em> etc. Push is a trick
	on top of the HTTP protocol where we can by locking an HTTP request down and denying
	it to return on the server actually create an <em>"open channel"</em> from where we
	can "push" data back to the client at the very same instant that the data is being 
	made available. For this tutorial we will use polling through the Ra-Ajax Timer 
	control. Though Ra-Ajax actually have a Comet component for creating push HTTP
	solutions, we will touch upon the Comet component of Ra-Ajax later.
</p>
<p>
	Create a default ASP.NET Website the way you should be familiar with doing it by now...
</p>

<h3>What do we need</h3>
<p>
	When you come to a website it should be an option or conscious choice whether or not 
	you want to enter the chat room or not. First of all because it's quite resource 
	demanding to poll for every visitor at your page. And second of all because most
	people visiting your website are probably not interested in entering your chat room
	but might rather be looking around for some other information. We will do this
	by having our Timer and chat logic inside of a Modal Window which we choose to make
	in-visible by default and only open when the user clicks a button.
</p>
<p>
	For the chat output, as in the place where we show the messages, we could have
	chosen a number of different technologies. Including GridViews, Repeaters and
	several other controls. To make this tutorial easy to follow and not too complex
	however we will choose to use a plain and simple Label for this though.
</p>
<p>
	Then <b>inside</b> the Window we will obviously need to have a Timer to poll 
	our server to see if there are any new chats available, and if there are update
	our "output Label".
</p>
<p>
	And then finally we obviously need to have a TextBox and a submit Button to
	make it possible to send your chat messages to the server.
</p>
<p>
	In addition we need to have some sort of "database" to store our chat messages
	in. We will just inline in our Default.aspx.cs page create a class called 
	Chat which contains a static List&lt;Chat&gt; property to retrieve and add to 
	the database.
</p>
<p>
	Below is the complete code showing all these pieces glued together in a 
	first draft.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<%@ Page 
    Language="C#" 
    AutoEventWireup="true"  
    CodeFile="Default.aspx.cs" 
    Inherits="_Default" %>

<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<%@ Register 
    Assembly="Extensions" 
    Namespace="Ra.Extensions" 
    TagPrefix="ext" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
    <head runat="server">
        <title>Untitled Page</title>
        <link href="skins/steel/Steel.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <form id="form1" runat="server">
            <div>
                <ra:Button 
                    runat="server" 
                    ID="btn" 
                    Text="Open Chat Window..." 
                    OnClick="btn_Click" />
                <ext:Window 
                    runat="server" 
                    ID="wnd" 
                    style="position:absolute;left:50px;top:50px;z-index:50;width:400px;"
                    Caption="Chat room Window"
                    Visible="false">
                    <div style="height:250px;padding:15px;">
                        <ext:Timer 
                            runat="server" 
                            ID="timer" 
                            OnTick="timer_Tick" />
                        <ra:Label 
                            runat="server" 
                            ID="chatOutput" 
                            Text="" />
                        <div style="position:absolute;bottom:15px;left:15px;">
                            <ra:TextBox 
                                runat="server" 
                                ID="txt" />
                            <ra:Button 
                                runat="server" 
                                ID="add" 
                                Text="Submit" 
                                OnClick="add_Click" />
                        </div>
                    </div>
                    <ra:BehaviorObscurable 
                        runat="server" 
                        ID="obsc" />
                </ext:Window>
            </div>
        </form>
    </body>
</html>
</pre>
<b>Default.aspx.cs</b>
<pre lang="cs">
using System;
using Ra.Widgets;
using System.Collections.Generic;

public partial class _Default : System.Web.UI.Page 
{
    public class Chat
    {
        private string _message;
        private static List<Chat> _chats = new List<Chat>();

        public Chat(string message)
        {
            _message = message;
        }

        public string Message
        {
            get { return _message; }
        }

        public static List<Chat> Messages
        {
            get { return _chats; }
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            GetChats();
        }
    }

    private void GetChats()
    {
        string newText = "";
        lock (typeof(Chat))
        {
            foreach (Chat idx in Chat.Messages)
            {
                newText += 
                    string.Format(
                        "<p style=\"padding:5px;border:dashed 1px #999;margin:5px;\">{0}</p>", 
                        idx.Message);
            }
        }
        chatOutput.Text = newText;
    }

    protected void btn_Click(object sender, EventArgs e)
    {
        wnd.Visible = true;
    }

    protected void timer_Tick(object sender, EventArgs e)
    {
        GetChats();
    }

    protected void add_Click(object sender, EventArgs e)
    {
        lock (typeof(Chat))
        {
            if (Chat.Messages.Count > 5)
                Chat.Messages.RemoveAt(0);
            Chat.Messages.Add(new Chat(txt.Text));
        }
        GetChats();
    }
}
</pre>

<p>
	When you click the Button you should see something similar to the screenshot below.
</p>
<img src="tutorials/chat-tutorial.jpg" alt="Ajax Chat Control with Ra-Ajax" />
<p>
	If you do not see something like the image above then please verify that have included
	the CSS file for the skin correctly. If you get a compiler error or something, then
	please verify that you have included a reference to both Ra.dll and Extensions.dll.
</p>

<h3>Explanation</h3>
<p>
	There are many familiar constructs in this code. First of all we have a 
	BehaviorObscurable to make our Window Modal. Second of all we're using a Timer
	to poll the server every 1 seconds. 1 second (or 1000) is the default value
	for the Duration property of the Timer. Then we're using a Window and making
	it visible only when a Button is being clicked And Labels too we have looked at
	previously.
</p>
<p>
	Though when we start playing around with this we realize that there's several 
	problems with this solution. Let's try to pinpoint some of them below.
</p>
<ul>
	<li>TextBox is not intuitively given focus automagically</li>
	<li>Enter key does not work correctly</li>
	<li>We have no visual clues telling us when a new chat message have arrived</li>
	<li>Every second is probably too often to check for new chat messages</li>
</ul>
<p>
	The first one is really easy to fix by in our <em>btn_Click</em> method call
	the <em>Focus</em> method of our TextBox. In addition we can also choose to 
	automagically give the TextBox focus also after a new chat has been added 
	in our <em>add_Click</em> method.
</p>
<pre lang="cs">
    protected void btn_Click(object sender, EventArgs e)
    {
        wnd.Visible = true;
        txt.Text = "Your chat message...";
        txt.Focus();
        txt.Select();
    }

...

    protected void add_Click(object sender, EventArgs e)
    {
        txt.Focus();
        txt.Select();
        lock (typeof(Chat))
        {
            if (Chat.Messages.Count > 5)
                Chat.Messages.RemoveAt(0);
            Chat.Messages.Add(new Chat(txt.Text));
        }
        GetChats();
    }
</pre>

<p>
	Notice how we also chose to add up a defaut text value for our TextBox when
	the Window becomes visible.
</p>
<p>
	The second problem is also very easy to fix. The Panel control have a property
	called <em>DefaultWidget</em> which can be the ID of any widget inside of the
	panel. This Widget will be <em>"clicked"</em> when the user presses the Enter
	key anywhere inside of the Panel. So by wrapping our TextBox and Button inside
	of a Panel instead of a normal HTML DIV we can get the Enter key to work 
	perfectly for us.
</p>
<pre lang="xml">
<ra:Panel
    runat="server"
    id="pnl" 
    DefaultWidget="add"
    style="position:absolute;bottom:15px;left:15px;">
    <ra:TextBox 
        runat="server" 
        ID="txt" />
    <ra:Button 
        runat="server" 
        ID="add" 
        Text="Submit" 
        OnClick="add_Click" />
</ra:Panel>
</pre>

<p>
	Notice how the <em>DefaultWidget property</em> is the same value as the 
	<em>ID property</em> of the Button. This property is also something which
	all Ra-Ajax Controls that inheritd from the Panel have. This includes e.g. 
	the Window and many more controls.
</p>
<p>
	Our third problem can also easily be fixed by checking to see if the content
	area of the chats are about to change when we <em>tick</em> towards the server,
	and if it does we throw in an EffectHighlight into the cake. Change your 
	<em>GetChats</em> method to the following. Though to get this trick to work
	we also need to change the rendering of the Label to become a DIV. Change
	the Tag property of the Label in the .ASPX file to have the value of "div". In
	addition to the following changes.
</p>
<pre lang="cs">
private void GetChats()
{
    string newText = "";
    lock (typeof(Chat))
    {
        foreach (Chat idx in Chat.Messages)
        {
            newText += 
                string.Format(
                    "<p style=\"padding:5px;border:dashed 1px #999;margin:5px;\">{0}</p>", 
                    idx.Message);
        }
    }
    if (newText != chatOutput.Text)
    {
        new EffectHighlight(chatOutput, 400).Render();
        chatOutput.Text = newText;
    }
}
</pre>

<p>
	Notice how we check to see if the text have actually changed, and if it has we
	run an EffectHighlight in addition to setting the Text property of the Label.
</p>
<p>
	Below is the complete code for your convenience.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<%@ Page 
    Language="C#" 
    AutoEventWireup="true"  
    CodeFile="Default.aspx.cs" 
    Inherits="_Default" %>

<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<%@ Register 
    Assembly="Extensions" 
    Namespace="Ra.Extensions" 
    TagPrefix="ext" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
    <head runat="server">
        <title>Untitled Page</title>
        <link href="skins/steel/Steel.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <form id="form1" runat="server">
            <div>
                <ra:Button 
                    runat="server" 
                    ID="btn" 
                    Text="Open Chat Window..." 
                    OnClick="btn_Click" />
                <ext:Window 
                    runat="server" 
                    ID="wnd" 
                    style="position:absolute;left:50px;top:50px;z-index:50;width:400px;"
                    Caption="Chat room Window"
                    Visible="false">
                    <div style="height:250px;padding:15px;">
                        <ext:Timer 
                            runat="server" 
                            ID="timer" 
                            OnTick="timer_Tick" />
                        <ra:Label 
                            runat="server" 
                            Tag="div"
                            ID="chatOutput" 
                            Text="" />
                        <ra:Panel
                            runat="server"
                            id="pnl" 
                            DefaultWidget="add"
                            style="position:absolute;bottom:15px;left:15px;">
                            <ra:TextBox 
                                runat="server" 
                                ID="txt" />
                            <ra:Button 
                                runat="server" 
                                ID="add" 
                                Text="Submit" 
                                OnClick="add_Click" />
                        </ra:Panel>
                    </div>
                    <ra:BehaviorObscurable 
                        runat="server" 
                        ID="obsc" />
                </ext:Window>
            </div>
        </form>
    </body>
</html>
</pre>

<b>Default.aspx.cs</b>
<pre lang="cs">
using System;
using Ra.Widgets;
using System.Collections.Generic;

public partial class _Default : System.Web.UI.Page 
{
    public class Chat
    {
        private string _message;
        private static List<Chat> _chats = new List<Chat>();

        public Chat(string message)
        {
            _message = message;
        }

        public string Message
        {
            get { return _message; }
        }

        public static List<Chat> Messages
        {
            get { return _chats; }
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            GetChats();
        }
    }

    private void GetChats()
    {
        string newText = "";
        lock (typeof(Chat))
        {
            foreach (Chat idx in Chat.Messages)
            {
                newText += 
                    string.Format(
                        "<p style=\"padding:5px;border:dashed 1px #999;margin:5px;\">{0}</p>", 
                        idx.Message);
            }
        }
        if (newText != chatOutput.Text)
        {
            new EffectHighlight(chatOutput, 400).Render();
            chatOutput.Text = newText;
        }
    }

    protected void btn_Click(object sender, EventArgs e)
    {
        wnd.Visible = true;
        txt.Text = "Your chat message...";
        txt.Focus();
        txt.Select();
    }

    protected void timer_Tick(object sender, EventArgs e)
    {
        GetChats();
    }

    protected void add_Click(object sender, EventArgs e)
    {
        txt.Focus();
        txt.Select();
        lock (typeof(Chat))
        {
            if (Chat.Messages.Count > 5)
                Chat.Messages.RemoveAt(0);
            Chat.Messages.Add(new Chat(txt.Text));
        }
        GetChats();
    }
}
</pre>




