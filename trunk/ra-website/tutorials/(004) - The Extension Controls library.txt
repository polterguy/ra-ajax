<h3>Aim of this tutorial</h3>
<ul>
	<li>Get you started with using the Extension Controls library</li>
	<li>Teach you the basics of how extension controls are built</li>
	<li>Teach you the first things you need to know in regards to skinning Ra-Ajax</li>
</ul>

<h3>Prerequisites</h3>
<ul>
	<li>That you have read and understood the previous tutorials in this series</li>
</ul>

<h3>Getting started</h3>
<p>
	So far, except for some Effects and Behaviors we have only used the "core controls" of
	Ra-Ajax. This time we will dive into some of the more "rich" controls that exist in
	the Extension Project.
</p>
<p>
	Start out by creating an <i>ASP.NET Website</i> just like in the previous tutorials, but this
	time make sure you also reference and include the <i>Extensions.dll</i> along with the <i>Ra.dll</i>
	since this dll is being used for all of the more "rich" controls like
</p>
<ul>
	<li>Window</li>
	<li>Timer</li>
	<li>Calendars and DateTimePickers</li>
	<li>plus many more...</li>
</ul>
<p>
	Code follows...
</p>
<pre lang="xml">
<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<%@ Register 
    Assembly="Extensions" 
    Namespace="Ra.Extensions" 
    TagPrefix="ext" %>
</pre>
<p>
	Now you can reference all the Extension Controls by typing in <i>&lt;ext:</i> in your .ASPX
	markup.
</p>

<h3>Creating a Modal Window</h3>
<p>
	We're going to create a Modal Window in this tutorial which will open only when the 
	user clicks a button, and initially be rendered as in-visible. Copy and paste the code 
	below into your website code files.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<ra:Button 
    runat="server" 
    ID="btn" 
    Text="Click me..." 
    OnClick="btn_Click" />
<ext:Window 
    runat="server" 
    ID="wnd" 
    style="position:absolute;left:50px;top:50px;z-index:50;"
    Caption="Hello World Window"
    Visible="false">
    <div style="padding:15px;">
        Howdy world! I'm BACK...!
    </div>
    <ra:BehaviorObscurable 
        runat="server" 
        ID="obsc" />
</ext:Window>
</pre>
<b>Default.aspx.cs</b>
<pre lang="cs">
protected void btn_Click(object sender, EventArgs e)
{
    wnd.Visible = true;
}
</pre>

<h3>The 2 second guide to skinning and CSS in regards to Ra-Ajax</h3>
<p>
	If you tried to run this now you would see that nothing looks like it is supposed
	to look like. This is because we haven't included any <i>skin CSS files</i>. You can
	easily do this by copying and pasting the <i>skins</i> folder to your root website
	folder and add the inclusion of the <i>Steel CSS file</i> like we have done below.
</p>
<pre lang="xml">
<head runat="server">
    <title>Untitled Page</title>
    <link href="skins/steel/Steel.css" rel="stylesheet" type="text/css" />
</head>
</pre>
<p>
	Most Extension Controls rely on skins to render correctly. Ra-Ajax is distributed
	with several skin files included, but you can also easily create your own skins by
	modifying the existing ones. These skins are just CSS. And along with the <i>inspect</i> 
	feature from FireBug, it is actually very easy to create your own skins.
</p>
<p>
	The skin CSS files in Ra-Ajax are all built in the same way, the <i>Window skin</i>
	is within the <i>.window</i> parts of the CSS files. And the Calendar skin within the
	<i>.calendar</i> parts of the CSS files. And so on...
</p>
<p>
	When you have included the CSS file for your skin, you can click F5 and test your 
	application. You should be able to see something like this.
</p>
<img src="tutorials/rich-controls-tutorial.jpg" alt="Modal Ajax Window with Ra-Ajax" />
<p>
	If you don't get something looking similar to the above image, then you have probably
	not included the skin CSS file correctly. Make sure your paths are correctly set up
	to point to the CSS file of your choice...
</p>
<p>
	The reason why the Window is <i>modal</i> is because we have added the <i>BehaviorObscurer</i>
	within the content parts of the Window. If you don't want to have a Modal Window then
	just remove the BehaviorObscurer and the Window will become "non-modal".
</p>
<p>
	The BehaviorObscurer can be set for <b>any</b> control you wish. Even Buttons if you wish.
	Although, if you use it your Control <b>must</b> have an explicit <i>z-index</i>. Without
	an explicit z-index then the obscurer will probably also obscure the control it is added to,
	since the obscurer will add an explicit z-index itself with one value lower then whatever
	z-index value you choose for its parent control.
</p>

<h3>About the Extension Controls</h3>
<p>
	Most Extension Controls (like the Window above) are entirely created without resorting
	to JavaScript. This is a pretty strong testimonial towards the extremely strong
	code-model of Ra-Ajax. Even most of our own Ajax Controls are created without having
	to use a lot of JavaScript ourselves.
</p>
<p>
	If you want to create your own Extension Controls, then the Extension Control 
	library, and also, the <i>Window.cs</i> file within here will prove a very 
	valuable resource for you to start out with.
</p>
<p>
	The Window Control has tons of useful properties. It has a <i>Caption</i> and a
	<i>Movable</i> property and it also has many more. But the Window control is
	only one of many controls within the Extension Controls library. In addition
	to the Window there are many more Controls that are included in the Extension 
	Controls library. Here is a small subset of those controls.
</p>
<ul>
	<li>Calendar and DateTimePicker</li>
	<li>Timer</li>
	<li>Tree (TreeView Control)</li>
	<li>Menu</li>
	<li>SlidingMenu</li>
	<li>Extended Button</li>
	<li>And many, many more...</li>
</ul>
<p>
	And, <b>*ALL*</b> of them are heavily documented, with good examples above in the 
	<i>Class Browser</i>.
</p>

<h3>Entire code</h3>
<p>
	Below is the entire code for this tutorial for reference purposes.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<%@ Page 
    Language="C#" 
    AutoEventWireup="true"  
    CodeFile="Default.aspx.cs" 
    Inherits="_Default" %>

<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<%@ Register 
    Assembly="Extensions" 
    Namespace="Ra.Extensions" 
    TagPrefix="ext" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
    <head runat="server">
        <title>Untitled Page</title>
        <link href="skins/steel/Steel.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <form id="form1" runat="server">
            <div>
                <ra:Button 
                    runat="server" 
                    ID="btn" 
                    Text="Click me..." 
                    OnClick="btn_Click" />
                <ext:Window 
                    runat="server" 
                    ID="wnd" 
                    style="position:absolute;left:50px;top:50px;z-index:50;"
                    Caption="Hello World Window"
                    Visible="false">
                    <div style="padding:15px;">
                        Howdy world! I'm BACK...!
                    </div>
                    <ra:BehaviorObscurable 
                        runat="server" 
                        ID="obsc" />
                </ext:Window>
            </div>
        </form>
    </body>
</html>
</pre>

<b>Default.aspx.cs</b>
<pre lang="cs">
using System;
using Ra.Widgets;

public partial class _Default : System.Web.UI.Page 
{
    protected void btn_Click(object sender, EventArgs e)
    {
        wnd.Visible = true;
    }
}
</pre>

<p>
	Also make sure that you correctly include the CSS file in your folder structure within
	your website.
</p>

<h3>Ra doesn't render in-visible widgets</h3>
<p>
	The above sentence might sound obvious, but very often an Ajax Library will in fact render not-visible
	widgets and just set its style properties to not show it. This means that you will get markup and
	DOM elements for your control even though they're not needed (yet). With such solutions you will
	get a very big DOM structure for a page if it is somewhat complex and contains a lot of widgets
	which you have set to not-visible. And, all is in vain...
<p>
<p>
	If you use FireBug and choose inspect on your DOM structure before you click the button to show 
	the Window you will not see any trace of the window at all, except for this tiny <i>span</i> element.
</p>
<pre lang="xml">
<span id="wnd" style="display:none" />
</pre>

<p>
	The above span would not be any more complex even if your window contained 1000 of different
	widgets of 100 of different types. In fact the above span is just a reference to a place in your
	DOM where the entire Window, with all its child widgets, can be rendered later, when you, in your
	code for some reasons choose to show it.
</p>
<p>
	If you click the button you will see a completely different DOM structure. This is because
	now the Window is being rendered and the span element will be <i>replaced</i> with the Window
	DOM elements and its child widget's DOM structure.
</p>

<pre lang="xml">
<div 
  style="position: absolute; left: 50px; top: 50px; z-index: 50;" 
  class="window" 
  id="wnd">
  <div class="window_nw" id="wnd_XXnw">
    <div class="window_ne" id="wnd_XXne">
      <div class="window_n" id="wnd_XXn">
        <span class="window_title" id="wnd_XXcaption">
          Hello World Window
        </span>
        <a class="window_close" id="wnd_XXclose" href="javascript:Ra.emptyFunction();"/>
      </div>
    </div>
  </div>
  <div class="window_body" id="wnd_XXbody">
    <div class="window_w" id="wnd_XXw">
      <div class="window_e" id="wnd_XXe">
        <div class="window_content" id="wnd_XXcontent">
          <div style="padding: 15px;">
            Howdy world! I'm BACK...!
          </div>
        </div>
      </div>
    </div>
    <div class="window_sw" id="wnd_XXsw">
      <div class="window_se" id="wnd_XXse">
        <div class="window_s" id="wnd_XXs"> </div>
      </div>
    </div>
  </div>
</div>
</pre>

<p>
	If Ra-Ajax didn't work with this "replace logic" then all of the above HTML markup would
	not only pollute the wire with extra bandwidth consumption, but also pollute your DOM
	for your browser which would result in less responsive DOM manipulation.
</p>
<p>
	In fact, nothing which is related to a widget will be rendered before you explicitly
	say in code that you want that widget to become visible. Even in some occasions,
	as we will see in a later tutorial, the same is true for JavaScript files associated 
	with your widgets.
</p>

<h3>2 second guide to the CSS structure of Ra-Ajax</h3>
<p>
	For the trained CSS guru there will be many familiar constructs in the DOM above.
	First of all, the <i>window</i> element at the root HTML node. The default CSS class
	of the Window is <i>"window"</i>. This can be overridden, and must in fact be 
	overridden if you want to have multiple skins for your windows on the same page.
</p>
<p>
	Also, Ra-Ajax very seldom uses <i>table design</i>. Instead of using table design
	we use cascading divs and spans inside of each other where ever possible to create the
	DOM layout. This can be seen above. This is another strength of Ra-Ajax since
	this makes your applications more accessible for disabled people and screen-readers, 
	etc. It also stresses the browser less and gives you and your designers more
	flexibility.
</p>
<p>
	Far too often developers would have chosen table design to create an Ajax Window 
	like the one above, which is an inferior solution in many ways.
</p>
<p>
	However, what this means actually, is that the <i>width</i> of the window must be set on 
	the window itself, while the <i>height</i> of the window must be set on a DIV element or
	a SPAN element contained within the Window. You cannot set the style property <i>height</i> 
	on the Window and expect it to work!
</p>
<p>
	So to get a working Window with an explicit width and height you must do something like this.
</p>
<pre lang="xml">
<ext:Window 
    runat="server" 
    ID="wnd" 
    style="position:absolute;left:50px;top:50px;z-index:50;width:300px;"
    Caption="Hello World Window">
    <div style="height:250px;">
        Howdy world! I'm BACK...!
    </div>
</ext:Window>
</pre>

<p>
	Notice how we set the <i>width</i> on the Window style collection, while we set the 
	<i>height</i> on the DIV which is within the Window. If you tried to do this any other
	way you would not get it to work.
</p>
<p>
	Also notice how we set the pixel height on the DIV which means that the height of the
	Window as shown would be the height of the DIV (250px) <b>*PLUS*</b> the height
	of the Window Chrome. Which would be roughly 32px for the default skins. 25px for the 
	top parts and 7px for the bottom parts. So, the Window above would be a total of
	282px in height.
</p>
<p>
	Which might be interesting for you when figuring out why all of a sudden you are
	not able to do basic calculus, since your design doesn't come out as you planned 
	on ... ;)
</p>

