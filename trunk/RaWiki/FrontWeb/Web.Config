<?xml version="1.0"?>

<configuration>
  <configSections>
    <section name="activerecord" type="Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler, Castle.ActiveRecord" />
    <section name="urlrewritingnet" type="UrlRewritingNet.Configuration.UrlRewriteSection, UrlRewritingNet.UrlRewriter" />
  </configSections>

  <appSettings>

    <!--  Note that Ra Ajax is 100% relying on having access to sending email through an SMTP server
          for things as diverse as registering new users, changes to articles and so on.
          If you do not have access to an SMTP server then it will be impossible to register new users
          except through the Admin interface of adding users "by hand". If you then turn OFF all the other
          values (autoApproveNewUsers, notifyAdminsOfChanges and notifyOriginalCreatorOfChanges)
          you can theoretically use Ra Ajax without an SMTP server, but no users can register themselves on 
          the site. This might fit your needs or not. Now you know!
          -->
    <add key="fromEmailAddress" value="polterguy@gmail.com"/>
    <add key="smtpServer" value="smtp.online.no"/>
    <add key="autoApproveNewUsers" value="true"/>
    <add key="notifyAdminsOfChanges" value="true"/>
    <add key="notifyOriginalCreatorOfChanges" value="true"/>
  </appSettings>

  <!--  This default connection string relies on MySQL being installed and accessible
        on the network somehow. You can easily configure Ra Wiki however to use any Database you
        wish including MsSQL even too. If you want to use another Database driver then please
        check the configuration documentation for ActiveRecord for .Net since that is
        out of scope for this documentation.
        Note that when using MySQL you also need the DLL; "MySql.Data.dll" in the bin folder of
        your application.
        -->
  <activerecord isWeb="true">
    <config>
      <add key="hibernate.connection.driver_class" value="NHibernate.Driver.MySqlDataDriver"/>
      <add key="hibernate.dialect" value="NHibernate.Dialect.MySQLDialect"/>
      <add key="hibernate.connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
      <add key="hibernate.connection.connection_string" value="Database=RaWiki;Server=localhost;User Id=root;Password=8pr4ms"/>
    </config>
  </activerecord>

  <urlrewritingnet
    rewriteOnlyVirtualUrls="true"   
    contextItemsPrefix="QueryString" 
    defaultProvider="RegEx"
    xmlns="http://www.urlrewriting.net/schemas/config/2006/07">
    <rewrites>

      <!--  URL rewriting for wiki entries to get friendly URLs -->
      <add name="RewriteWikis"
           virtualUrl="~/(.*).wiki"
           rewriteUrlParameter="ExcludeFromClientQueryString" 
           destinationUrl="~/Wiki.aspx?id=$1"
           ignoreCase="true" />
    </rewrites>
  </urlrewritingnet>

  <system.web>
    <httpHandlers>

      <!--  These setting makes sure that the images and css files downloaded to the client
            will have a far out expiring date which will seriously optimize the use of all
            images in the wiki system since then clients will not poll the server to check
            for new versions of the images and css files it uses if it has downloaded them 
            before. This will really optimize the client user experience since the number
            of HTTP connections will significantly be reduced.
            -->
      <add verb="*" path="*.gif" type="ResourceCacher.FarFutureExpires, ResourceCacher"/>
      <add verb="*" path="*.png" type="ResourceCacher.FarFutureExpires, ResourceCacher"/>
      <add verb="*" path="*.jpg" type="ResourceCacher.FarFutureExpires, ResourceCacher"/>
      <add verb="*" path="*.jpeg" type="ResourceCacher.FarFutureExpires, ResourceCacher"/>
      <add verb="*" path="*.css" type="ResourceCacher.FarFutureExpires, ResourceCacher"/>
    </httpHandlers>

    <httpModules>

      <!-- Making sure our URL rewriting module is loaded -->
      <add name="UrlRewriteModule" type="UrlRewritingNet.Web.UrlRewriteModule, UrlRewritingNet.UrlRewriter" />
    </httpModules>

    <compilation debug="true">
      <assemblies>
        <add assembly="System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
      </assemblies>
    </compilation>

    <authentication mode="Windows"/>

  </system.web>
</configuration>
