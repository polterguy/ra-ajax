<h3>Aim of this tutorial</h3>
<ul>
	<li>Show you how the <a href="Docs.aspx?class=Ra.Extensions.Widgets.Timer">Timer control</a> works</li>
	<li>Teach you how the dynamic inclusion of JavaScript works in Ra-Ajax</li>
</ul>

<h3>Prerequisites</h3>
<ul>
	<li>That you have read and understood the previous tutorials in this series</li>
</ul>

<h3>Getting started</h3>
<p>
	The <a href="Docs.aspx?class=Ra.Extensions.Widgets.Timer">Timer Control</a> is one of very 
	few "non-visible" controls in Ra-Ajax, and it's
	purpose is not to render HTML but rather to call up the server and call your
	own Event Handler every n'th second.
</p>
<p>
	This time we will start out with the entire code for our sample. And later 
	analyze the code and see what happens when interacting with Ra-Ajax to further
	understand some of the really great points about Ra-Ajax. Create a default
	<i>ASP.NET Website</i>, also include the <i>Extensions.dll</i> and the <i>Ra.dll</i>
	and then copy the code below into your code files.
</p>
<b>Default.aspx</b>
<pre lang="xml">
<%@ Page 
    Language="C#" 
    AutoEventWireup="true"  
    CodeFile="Default.aspx.cs" 
    Inherits="_Default" %>

<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<%@ Register 
    Assembly="Extensions" 
    Namespace="Ra.Extensions.Widgets" 
    TagPrefix="ra" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
    <head runat="server">
        <title>Untitled Page</title>
        <link href="skins/steel/Steel.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <form id="form1" runat="server">
            <div>
                <ra:Button 
                    runat="server" 
                    ID="btn" 
                    Text="Click me..." 
                    OnClick="btn_Click" />
                <ra:Window 
                    runat="server" 
                    ID="wnd" 
                    style="position:absolute;left:50px;top:50px;z-index:50;"
                    Caption="Hello World Window"
                    Visible="false">
                    <div style="padding:45px;">
                        <ra:Timer 
                            runat="server" 
                            ID="timer" 
                            OnTick="timer_Tick" />
                        <ra:Label 
                            runat="server" 
                            ID="lbl" 
                            Text="Watch me..." />
                    </div>
                    <ra:BehaviorObscurable 
                        runat="server" 
                        ID="obsc" />
                </ra:Window>
            </div>
        </form>
    </body>
</html>
</pre>
<b>Default.aspx.cs</b>
<pre lang="cs">
using System;
using Ra.Widgets;

public partial class _Default : System.Web.UI.Page 
{
    protected void btn_Click(object sender, EventArgs e)
    {
        wnd.Visible = true;
    }

    protected void timer_Tick(object sender, EventArgs e)
    {
        lbl.Text = DateTime.Now.ToString();
    }
}
</pre>

<h3>Dynamically including JavaScript 100% automagically</h3>
<p>
	The dynamic inclusion of JavaScript in callbacks is one of many Ra-Ajax really 
	great features. The Timer control has a JavaScript file associated with it. This  
	is needed in order to be able to call your server every n'th second. Although when 
	you run the above sample there is no trace of this custom "JavaScript file" 
	anywhere to be seen...
</p>
<p>
	When you click the <a href="Docs.aspx?class=Ra.Widgets.Button">Button</a> the 
	<a href="Docs.aspx?class=Ra.Extensions.Widgets.Timer">Timer</a> will be rendered since it's a child
	control of the <a href="Docs.aspx?class=Ra.Extensions.Widgets.Window">Window</a>, which is being made visible. And, then the Timer
	will work 100% correctly. This is because Ra-Ajax has support for dynamically
	including JavaScript files 100% automatically in Ajax Callbacks. This works
	100% transparent and the Timer Control itself will keep track of when it
	needs to include its JavaScript file.
</p>
<p>
	Just before the Timer is about to be "rendered" (it doesn't really have any
	visible HTML to render, but think conceptually anyway) it will automatically
	make sure that its JavaScript file (<a href="http://code.google.com/p/ra-ajax/source/browse/trunk/Ra.Extensions/Js/Timer.js">Timer.js</a>) is being included on the client.
	It will wait until the JavaScript file is finished being included, in fact 
	before referencing types and functions in its JavaScript file. All this is
	being done 100% transparently without you needing to think about it at all.
</p>
<p>
	This has the benefit of <b>*SIGNIFICANTLY*</b> reducing pressure on the browser
	and making your solutions behave significantly more responsive. You can even include
	<b>*ANY*</b> JavaScript file you wish, even <a href="http://jquery.com/">jQuery</a> can be dynamically included
	in Ajax Callbacks like this.
</p>
<p>
	If you open up the <a href="http://code.google.com/p/ra-ajax/source/browse/trunk/Ra.Extensions/Widgets/Timer.cs">Timer.cs</a> file in the Extensions project of Ra-Ajax and look at its 
	code, you will see that the Timer class is overriding the <i>OnPreRender</i> method 
	from ASP.NET. 
</p>
<b>Timer.cs</b>
<pre lang="cs">
...
protected override void OnPreRender(EventArgs e)
{
    AjaxManager.Instance.IncludeScriptFromResource(typeof(Timer), "Extensions.Js.Timer.js");
    base.OnPreRender(e);
}
...
</pre>

<p>
	The <i>OnPreRender</i> method will only be called when the widget is about to
	be rendered. Meaning it's somehow visible and needs to include its JavaScript
	file.
</p>
<p>
	As you can see Ra-Ajax has its own methods for including JavaScript files. These
	methods can be found on the <i>AjaxManager</i> class in the core. Ra-Ajax has two
	different methods for including JavaScript files. One to include JavaScript files
	from resources, typically used by control developers. And, another method for 
	including any other JavaScript files.
</p>
<p>
	If you observe what happens in your browser the first time you click the Button
	to show the Window you will notice that FireBug reports an extra GET request
	going to your server. This request will be automatically created when you include
	a JavaScript file and will be the request fetching your JavaScript file, and make 
	sure it's being "included". Actually it's not being "included" semantically but 
	rather "executed" when the fetching request returns...
</p>
<img src="tutorials/timer-tutorial.jpg" alt="JavaScript being included in an Ajax Callback" />
<p>
	<i>Look at the extra GET request above which is being created after the Button
	is being clicked. This is to fetch the Timer.js file from the server and is
	being 100% transparently executed automatically for you when the Timer becomes
	visible.</i>
</p>
<p>
	Now if you think about this for a second you will pretty soon realize that this
	makes it possible for you to create extremely lightweight solutions that only
	includes what is needed for the browser at any given time, and everything it 
	doesn't need will instantly be there whenever it actually needs it - which may
	be somewhere in the future, or never at all. Depending upon whatever actions
	the user performs on your solution.
</p>
<p>
	If you use FireBug coupled with <a href="http://developer.yahoo.com/yslow/">YSlow</a> on this page for instance you will see
	that the amount of JavaScript on this page is less than 10KB. Which is an incredibly
	small number for such a complex behavior that this page creates. The dynamic
	inclusion of JavaScript files are one of the reasons behind this extremely 
	lightweight result.
</p>
<p>
	And, the best part is that you don't even need to modify your JavaScript files 
	at all to make them become possible to include in Ra-Ajax Callbacks. You can take
	existing JavaScript files written for completely different purposes and still 
	"port them" so you can take advantage of old legacy code in combination with Ra-Ajax.
	The only thing you need to modify is the way you include those JavaScript files on the server.
</p>
<p>
	For the JavaScript gurus out there, the internals of this is being done by creating
	a <b>synchronous</b> XMLHTTPRequest which will fetch the JavaScript file and just
	run an eval on the returned JavaScript. Then the included JavaScript files will
	be tracked by an array of paths which any JavaScript file will be checked against
	before it is being fetched.
</p>
<p>
	Now on to something funny; <a href="Docs.aspx?tutorial=006-Creating_an_Ajax_Chat_Application">How to create an Ajax Chat client</a> using Ra-Ajax ... :)
</p>


