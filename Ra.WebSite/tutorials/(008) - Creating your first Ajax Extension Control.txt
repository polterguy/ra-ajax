<h3>Aim of this tutorial</h3>
<ul>
	<li>Help you create your own Ajax Extension Control with Ra-Ajax</li>
	<li>Teach you some internals from ASP.NET needed to create Extension Controls</li>
</ul>

<h3>Prerequisites</h3>
<ul>
	<li>That you have read and understood the previous tutorials in this series</li>
</ul>

<h3>Getting started</h3>
<p>
	Ra-Ajax have a very strong server-centric model. This is further emphasized when 
	you realize that even most Extension Controls are built purely in C#. And most
	Ajax Controls you need can purely be built utilizing nothing but plain old C#
	and only in the extreme cases you need to resort to writing JavaScript yourself.
</p>
<p>
	In fact almost all our Extension Controls like Window, Calendar, InPlaceEdit
	and so on are purely built without any custom JavaScript at all. And most of 
	the Controls that actually have custom JavaScript are using it mostly for
	optimization reasons and not because they inheritingly need it.
</p>

<h3>Creating an Image Gallery Control</h3>
<p>
	Lightbox was probably one of the first really popular Ajax Controls and probably
	contributed a lot to the spreading of Ajax conceptually. Let us create our own
	version of the famous <em>LightBox Ajax Control</em>. First we need to figure out
	what we need in it though.
</p>
<ul>
	<li>List of images to display</li>
	<li>Clicking on the image to see the next image</li>
	<li>Browsing backwards will be left as an excercise for you to figure out yourself ;)</li>
</ul>
<p>
	Here I will for the simplicity of the sample only create an "inline class" in my
	Default.aspx.cs. Normally you would create a project to host your controls like this
	and then you'd link in the project by adding a <em>Register</em> directive at the
	top of your page. The same way we're including Ra-Ajax. Also to keep the tutorial
	as short and consice as possible I will create the whole code in one bang and then 
	explain the details of it below.
</p>

<b>.ASPX markup</b>
<pre lang="xml">
<%@ Page 
    Language="C#" 
    AutoEventWireup="true"  
    CodeFile="Default.aspx.cs" 
    Inherits="_Default" %>

<%@ Register 
    Assembly="Ra" 
    Namespace="Ra.Widgets" 
    TagPrefix="ra" %>

<!DOCTYPE html="http://www.w3.org/1999/xhtml">
<html>
    <head id="Head1" runat="server">
        <title>Untitled Page</title>
    </head>
    <body>
        <form id="form1" runat="server">
            <ra:Button 
                runat="server" 
                ID="btn" 
                Text="Show lightbox" 
                OnClick="btn_Click" />
        </form>
    </body>
</html>
</pre>

<b>C# code</b>
<pre lang="cs">
using System;
using Ra.Widgets;
using System.Collections.Generic;


// This is our WebControl. We inherit from Panel 
// and override a couple of methods...
public class LightBox : Panel
{
    // Making sure our List is never null
    public LightBox()
    {
        Images = new List<string>();
    }

    // We must override OnInit in order to
    // make sure our child controls are being created
    protected override void OnInit(EventArgs e)
    {
        base.OnInit(e);

        // This one will internally make sure that
        // CreateChildControls are being called ONCE
        // and ONCE ONLY...
        EnsureChildControls();
    }

    // This is the bugger we're creating our controls within
    protected override void CreateChildControls()
    {
        base.CreateChildControls();

        // Setting a couple of dummy styles just to make sure
        // we get to show something at least close to beautifully
        // in our sample webpage...
        this.Style[Styles.zIndex] = "100";
        this.Style[Styles.position] = "absolute";
        int no = 0;

        // Looping through list of strings creating
        // an Image for every string i our list
        foreach (string idx in Images)
        {
            Image i = new Image();
            i.ID = this.ID + no;
            i.ImageUrl = idx;

            // Some positioning and other styles...
            i.Style[Styles.top] = "100px";
            i.Style[Styles.left] = "250px";
            i.Style[Styles.cursor] = "pointer";
            i.Style[Styles.position] = "absolute";
            i.Style[Styles.border] = "solid 3px White";

            i.AlternateText = "LightBox";

            // Making sure our first Image is the only
            // one that's being rendered as visible
            if (no != 0)
                i.Style[Styles.display] = "none";
            i.Visible = no == 0;

            // Our Click the Image Event Handler
            // We just go forward when the user clicks the image
            // to create a "true" lightbox we'd need to have
            // two controls. One "forward" and one "previous"
            // button
            i.Click +=
                delegate
                {
                    // Finding the currently visible Image
                    int noCurrent = 0;
                    foreach (Image idx2 in this.Controls)
                    {
                        if (idx2 != null && idx2.ID == i.ID && idx2.Visible)
                        {
                            break;
                        }
                        noCurrent += 1;
                    }

                    // Finding the next image to BECOME visible
                    int noNext;
                    if (noCurrent == this.Controls.Count - 3)
                        noNext = 0;
                    else
                        noNext = noCurrent + 1;
                    this.Controls[noNext].Visible = true;

                    // Fading in the old image and fading in the
                    // new image
                    new EffectFadeOut(this.Controls[noCurrent], 400)
                        .ChainThese(
                            new EffectFadeIn(this.Controls[noNext], 400))
                        .Render();
                };
            this.Controls.Add(i);
            no += 1;
        }

        // Making sure the LightBox is completely modal
        // This was the reason why we had to add up z-index and 
        // position absolute values higher up in our code
        BehaviorObscurable obs = new BehaviorObscurable();
        this.Controls.Add(obs);

        // Creating our "close" button
        LinkButton b = new LinkButton();
        b.ID = "closer";
        b.Text = "X";
        b.Style[Styles.position] = "absolute";
        b.Style[Styles.top] = "100px";
        b.Style[Styles.left] = "440px";
        b.Style[Styles.color] = "Red";
        b.Click +=
            delegate
            {
                // Closing LightBox
                this.Visible = false;
            };
        this.Controls.Add(b);
    }

    // Property of strings which are supposed to be URLs
    public List<string> Images { get; private set; }
}


// This is the class for our codebehind
public partial class _Default : System.Web.UI.Page
{
    private LightBox _box;

    protected void Page_Load(object sender, EventArgs e)
    {
        _box = new LightBox();
        _box.Visible = false;
        _box.Images.Add("john-lennon.jpg");
        _box.Images.Add("bono.jpg");
        _box.Images.Add("elvis-presley.jpg");
        Form.Controls.Add(_box);
    }

    protected void btn_Click(object sender, EventArgs e)
    {
        // Making our LightBox visible
        _box.Visible = true;
    }
}
</pre>

<p>
	If you run the above code, with some valid Image values for the List of images
	you will get to see something like the this.
</p>
<img src="tutorials/extension-controls-screen-shot.jpg" alt="Screenshot" />
<p>
	Then when you click the image surface the image will "morph out" and a new image
	will fade in and become visible. You can close the LightBox by clicking the 
	X at the top right corner.
</p>

<h3>Explenation</h3>
<p>
	Now this is far from a complete LightBox implementation, it has several flaws. 
	For instance the style properties are pretty "hard coded" and should be more
	flexible for different sizes of Images and such. And also you can only click the
	image itself to go *forward only*. There's no way to go "backwards" in your gallery.
	But those are pretty easy to implement, and left as an excercise for you to accomplish.
	However what IS really interesting is the fact that we did create this LightBox 
	completely without *ONE* line of JavaScript.
</p>
<p>
	Now the first one who implements a complete LightBox from this sample will
	get that sample hosted for download here, with his name in the limelights 
	and a link to his website ;)
</p>
<p>
	If you're interested in doing such a thing, then create your complete LightBox,
	<a href="mailto:thomas@ra-ajax.org">send me an email</a> and we'll post it up
	here :)
</p>